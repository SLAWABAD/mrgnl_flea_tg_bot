"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

import logging
from aiogram.types import InputMediaPhoto

logger = logging.getLogger(__name__)

def format_price(price_text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    
    :param price_text: –¢–µ–∫—Å—Ç —Å —Ü–µ–Ω–æ–π
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
    """
    try:
        price = int(price_text.replace(" ", ""))
        if price <= 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
        return f"{price:,}".replace(",", " ") + " ‚ÇΩ"
    except ValueError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã")

def get_user_mention(user):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram
    :return: –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return f"@{user.username}" if user.username else f"tg://user?id={user.id}"

def get_user_display(user):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram
    :return: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return f"@{user.username}" if user.username else f"{user.first_name} (–Ω–µ—Ç @username!)"

def create_ad_text(data, is_moderation=False):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    :param data: –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    :param is_moderation: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    :return: –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    """
    text = (
        f"üö≤ <b>{data['title']}</b>\n\n"
        f"üìå {data['description']}\n"
        f"üí∞ –¶–µ–Ω–∞: {data['price']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['user_display']}\n\n"
    )
    
    if is_moderation:
        text += f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data['user_mention']}"
    else:
        text += "–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤—É: @fgpmarket_bot"
    
    return text

def create_media_group(photos, caption=None, parse_mode=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    
    :param photos: –°–ø–∏—Å–æ–∫ ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    :param caption: –ü–æ–¥–ø–∏—Å—å –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    :param parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    :return: –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞
    """
    media_group = []
    for i, photo_id in enumerate(photos):
        if i == 0 and caption:
            media_group.append(InputMediaPhoto(media=photo_id, caption=caption, parse_mode=parse_mode))
        else:
            media_group.append(InputMediaPhoto(media=photo_id))
    return media_group 